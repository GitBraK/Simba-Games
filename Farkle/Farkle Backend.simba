program new;

type
  TDice = record
    Selected, Scorable, Active : Boolean;
    Number : Integer;
  end;

Var
  Dice, DiceState : Array [1..6] of TDice;
  StateList : TStringArray;
  BankScore, RiskScore : Integer;
  Farkle : Boolean;

Procedure AddtoStateList(S : String);
Var
  I : Integer;
begin
  I := GetArrayLength(Statelist);
  SetArrayLength(StateList, I + 1);
  Statelist[i] := S;
end;

Procedure PrintStateList;
Var
  I, II, III : Integer;
  List : TStringArray;
begin
  I := GetArrayLength(Statelist);
  For II := 0 to I do
  begin
    SetArrayLength(List , III + 1);
    List[III] := Statelist[II];
    Inc(III);
    If III = 4 then
    begin
      writeln(tostr(List));
      II := 0;
    end;
  end;
end;

Procedure DiceActivation(Which : Integer; Active: Boolean); //switches dice activation state
begin
  Dice[Which].Active := Active;
end;

procedure ActivateAllDice(Active : Boolean);
var
  I : Integer;
begin
  For I := 1 to 6 do
    Dice[i].Active := Active;
end;

Function IsDiceActive(Which : Integer) : Boolean; //Returns True if specific dice is active
begin
  Result := Dice[which].Active;
end;

function AllDiceActive(Active: Boolean): Boolean;
var
  I: Integer;
begin
  Result := True;
  for I := 1 to 6 do
    Result := Result and (IsDiceActive(I) = Active);
end;

function GetActiveDice : TIntegerArray;// Get Active Dice Numbers
Var
  TI : TIntegerArray;
  I, II : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Active then
    begin
      II := GetArrayLength(Result);
      SetArrayLength(Result, II + 1)
        Result[II] := Dice[i].Number;
    end;
end;

function GetSelectedDice : TIntegerArray;
Var
  I, II : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Selected then
    begin
      II := GetArrayLength(Result);
      SetArrayLength(Result, II + 1)
      Result[II] := Dice[i].Number;
    end;
end;

procedure SelectedToInactive;
var
  I : Integer;
begin
  For I := 1 to 6 do
    If Dice[i].Selected then
    begin
      Dice[i].Active := False;
      Dice[i].Selected := False;
    end;
end;

procedure RollDice(All : Boolean);
var
  I : Integer;
begin
  for I := 1 to 6 do
  if All or Dice[i].Active then
    Dice[i].Number :=  Floor(RandomRange(10000, 69999)/ 10000);
end;

function GetDiceCount(Selected : Boolean) : TIntegerArray; //Gets a count of active dice Number's
var                                    //Example [1,1,1,3,0,0] = [4,3,4,4,1,2]
  TII : Array [1..6] of Integer;
  I, II : Integer;
  TI : TIntegerArray;
begin
  if not Selected then
    TI := GetActiveDice
  else
    TI := GetSelectedDice;
  II := GetArrayLength(TI);
  SetArrayLength(TI, 6);
  For I := 0 to 5 do
  begin
    Case TI[i] of
      1: Inc(TII[1]);
      2: Inc(TII[2]);
      3: Inc(TII[3]);
      4: Inc(TII[4]);
      5: Inc(TII[5]);
      6: Inc(TII[6]);
    end;
  end;
  Result := TII;
end;

function GetActiveDiceCount : TIntegerArray;
begin
  Result := GetDiceCount(false);
end;

Function CheckForStraight(Selected : Boolean) : Boolean;
var
  I : Integer;
  TI : TIntegerArray;
begin
  TI := GetDiceCount(Selected);
  Result := False;
  If not AllDiceActive(true) then
    Exit;
  For I := 0 to 5 do
    If  (TI[I] > 1) or (TI[I] = 0) or (TI[i] = 2) then
      Exit;
  Result := True;
end;

Function Checkfor2Trips(Selected : Boolean) : Boolean;
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive(true) then
    exit;
  For I := 0 to 5 do
    If TI[i] = 3 then
      Inc(II);
  Result := (II = 2);
end;

Function Checkfor3Pairs(Selected : Boolean) : Boolean;
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive(true) then
    exit;
  For I := 0 to 5 do
    If TI[i] = 2 then
      Inc(II);
  Result := (II = 3);
end;

Function CheckforPairAndSet(Selected : Boolean) : Boolean;
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive(true) then
    exit;

  For I := 0 to 5 do
    case TI[i] of
      4 : for II := 0 to 5 do
            if not InIntArray([0, 1, 3, 4, 5, 6], TI[ii]) then
            begin
              Result := true;
              exit;
            end;

      2 : For II := 0 to 5 do
            if not InIntArray([0, 1, 2, 3, 5, 6], TI[ii]) then
            begin
              Result := true;
              exit;
            end;
    end;
end;

function CheckforSets(Out Which: Integer; Selected : Boolean) : Boolean;
var
  I : Integer;
  TI : TIntegerArray;
begin
  result := True;
  TI := GetDiceCount(Selected);
  for I := 0 to 5 do
    If InIntArray([6,5,4,3], TI[i]) then
    begin
      Which := (I + 1);
      Exit;
    end;
  Result := False;
end;

procedure MarkScorablebyNumber(Number : Integer); // Mark specific Numbered dice as scorable
var
  I : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Number = Number then
      Dice[i].Scorable := Dice[i].Active;
end;

procedure MarkAllScorable; //Mark all scorable dice
var
  I : Integer;
begin
  for I := 1 to 6 do
    Dice[i].Scorable := Dice[i].Active;
end;

function CheckForNumber(Number: Integer; Selected : Boolean; out Amount : Integer) : Boolean;
var
  TI : TIntegerArray;
begin
  TI := GetDiceCount(Selected);
  Result := (TI[Number - 1] > 0);
  Amount := TI[Number - 1];
end;

Function ScorableDice: Boolean; //Checks for Scorable dice
var
  I, II : Integer;

begin
  Result := False;
  For I := 0 to 6 do
  case I of
    0 : if CheckForStraight(False) then
        begin
          MarkAllScorable;
          Result := true;
          exit;
        end;
    1 : if Checkfor2Trips(False) then
        begin
          MarkAllScorable;
          result := true;
          exit;
        end;
    2 : if Checkfor3Pairs(False) then
        begin
          MarkAllScorable;
          result := true;
          exit;
        end;
    3 : if CheckforPairAndSet(False) then
        begin
          MarkAllScorable;
          result := true;
          exit;
        end;
    4 : If CheckforSets(II, False) then
        begin
          MarkScorablebyNumber(II);
          result := true;
        end;
    5 : If CheckForNumber(1, false, II) then
        begin
          MarkScorablebyNumber(1);
          result := true;
        end;
    6 : If CheckForNumber(5, false, II) then
        begin
          MarkScorablebyNumber(5);
          result := true;
        end;
  end;
end;

procedure ClickDice(Which : Integer);
begin
  If Dice[Which].Scorable then
    Dice[which].Selected := Not Dice[which].selected;
end;

procedure ResetDice;
var
  I : Integer;
begin
  for I := 1 to 6 do
    with Dice[I] do
    begin
      Selected := False;
      Scorable := False;
      Active := True;
      Number := 0;
    end;
end;

function GetSetScore(Which : Integer) : Integer;
var
  TI : TIntegerArray;
begin
  TI := GetDiceCount(true);
  case TI[Which - 1] of
  3: If Which = 1 then
       Result := 300
     else
       Result := Which * 100;

  4: result := 1000;

  5: result := 2000;

  6: result := 3000;
  end;
end;

function GetSelectedDiceScore : Integer;
var
  I, II, Ones, Fives, Skip, Score : Integer;
  TI : TIntegerArray;
begin
  TI := GetSelectedDice;
  writeln('High(TI) = ' + tostr(Length(TI)));
  for I := 0 to 6 do
  Case I of
    0 : if CheckForStraight(true) then
        begin
          IncEx(Score, 1500);
          writeln('Straight Score = ' + tostr(score));
          Break;
        end;
    1 : if Checkfor2Trips(true) then
        begin
          IncEx(Score, 2500);
          writeln('2 Trips Score = ' + tostr(score));
          Break;
        end;
    2 : if Checkfor3Pairs(true) then
        begin
          IncEx(Score, 1500);
          writeln('3 Pairs Score = ' + tostr(score));
          Break;
        end;
    3 : if CheckforPairAndSet(true) then
        begin
          IncEx(Score, 1000);
          writeln('Pair and set score of ' + tostr(Score));
          Break;
        end;
    4 : If CheckforSets(II, true) then
        begin
          IncEx(Score, GetSetScore(II));
          Writeln('Set of ' + tostr(II));
          If II = 1 then
            Skip := 1;
          if II = 5 then
            skip := 5;
        end;
    5 : If Not (Skip = 1) then
          If CheckForNumber(1, true, Ones) then
          begin
            IncEx(score, Ones * 100);
            writeln('Check for ones score = ' + tostr(Score));
          end;
    6 : If Not (Skip = 5) then
          If CheckForNumber(5, true, Fives) then
          begin
            IncEx(score, Fives * 50);
            writeln('Check for Fives score = ' + tostr(Score));
          end;
  end;
  Result := Score;
end;

{Procedure ResetScore(Which : Integer);

  Resets various scores.

  Which:
    0 := BankScore
    1 := RiskScore
    2 := Both
}
Procedure ResetScore(Which : Integer);
begin
  case which of
    0 : BankScore := 0;
    1 : RiskScore := 0;
    2 : begin
          Riskscore := 0;
          BankScore := 0;
        end;
  end;
end;

Function GetGameState() : String;
var
  I : Integer;
begin
  for I := 0 to 3 do
  case I of
    0:;
    1:;
    2:;
    3:;

  end;
  Result := '';
end;

function GoToGameState(Location : String) :Boolean;
begin
  Result := False;
end;

Var
  IIIIII : Integer;
  TIII : TIntegerArray;

begin                                    //Scoring Test
  ActivateAllDice(true);
  DiceActivation(5, False);
  RollDice(true);
  writeln(tostr(GetDiceCount(False)));
  If ScorableDice then
  begin
    For IIIIII := 1 to 6 do
      if dice[iiiiii].Scorable then
        dice[iiiiii].Selected := true;
    writeln(tostr(GetSelectedDiceScore));
  end;
  writeln(tostr(dice) + ' (Selected, Scorable, Active, Number)');
end.
