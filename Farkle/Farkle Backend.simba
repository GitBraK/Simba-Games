program new;

type
  TDice = record
    Selected, Scorable, Active : Boolean;
    Number : Integer;
  end;

Var
  Dice : Array [1..6] of TDice;
  StateList : TStringArray;

Function LoadBMP(Which : Integer): Integer;
begin
  Case Which of
    1: Result := BitmapFromString(82, 82, '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');
    2: Result := BitmapFromString(82, 82, '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');
    3: Result := BitmapFromString(82, 82, '');
    4: Result := BitmapFromString(82, 82, '');
    5: Result := BitmapFromString(82, 82, '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');
    6: Result := BitmapFromString(82, 82, '');
  end;
end;

Procedure AddtoStateList(S : String);
Var
  I : Integer;
begin
  I := GetArrayLength(Statelist);
  SetArrayLength(StateList, I + 1);
  Statelist[i] := S;
end;

Procedure PrintStateList;
Var
  I, II, III : Integer;
  List : TStringArray;
begin
  I := GetArrayLength(Statelist);
  For II := 0 to I do
  begin
    SetArrayLength(List , III + 1);
    List[III] := Statelist[II];
    Inc(III);
    If III = 4 then
    begin
      writeln(tostr(List));
      II := 0;
    end;
  end;
end;

procedure FreeBMPs;
Var
  I : Integer;
begin
  For I := 0 to 5 do
    FreeBitmap(I);
end;

Procedure DiceActivation(Which: Integer; Active: Boolean); //switches dice activation state
begin
  Dice[Which].Active := Active;
end;

procedure ActivateAllDice;
var
  I : Integer;
begin
  For I := 1 to 6 do
    Dice[i].Active := true;
end;

Function IsDiceActive(Which : Integer) : Boolean; //Returns True if specific dice is active
begin
  Result := Dice[which].Active;
end;

Function AllDiceInactive : Boolean; //Returns true if all dice are inactive
var
  I : Integer;
begin
  Result := false;
  For I := 1 to 6 do
    If IsDiceActive(I) then
      Exit;
  result := True;
end;

Function AllDiceActive : Boolean; //Returns true if All dice are active
var
  I : Integer;
begin
  Result := False;
  For I := 1 to 6 do
    If Not IsDiceActive(I) then
      Exit;
  result := True;
end;

function GetActiveDice : TIntegerArray;// Get Active Dice Numbers
Var
  TI : TIntegerArray;
  I, II : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Active then
    begin
      II := GetArrayLength(TI);
      SetArrayLength(TI, II + 1)
        TI[II] := Dice[i].Number;
    end;
  result := TI;
end;

function GetSelectedDice : TIntegerArray;
Var
  TI : TIntegerArray;
  I, II : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Selected then
    begin
      II := GetArrayLength(TI);
      SetArrayLength(TI, II + 1)
        TI[II] := Dice[i].Number;
    end;
  result := TI;
end;

procedure SelectedToInactive;
var
  I : Integer;
begin
  For I := 1 to 6 do
    If Dice[i].Selected then
    begin
      Dice[i].Active := False;
      Dice[i].Selected := False;
    end;
end;

procedure RollDice(All : Boolean);
var
  I : Integer;
begin
  for I := 1 to 6 do
  if All or Dice[i].Active then
    Dice[i].Number :=  Floor(RandomRange(10000, 69999)/ 10000);
end;

function GetDiceCount(Selected : Boolean) : TIntegerArray; //Gets a count of active dice Number's
var                                    //Example [1,1,1,3,0,0] = [4,3,4,4,1,2]
  TII : Array [1..6] of Integer;
  I, II : Integer;
  TI : TIntegerArray;
begin
  if not Selected then
    TI := GetActiveDice
  else
    TI := GetSelectedDice;
  II := GetArrayLength(TI);
  SetArrayLength(TI, 6);
  For I := 0 to 5 do
  begin
    Case TI[i] of
      1: Inc(TII[1]);
      2: Inc(TII[2]);
      3: Inc(TII[3]);
      4: Inc(TII[4]);
      5: Inc(TII[5]);
      6: Inc(TII[6]);
    end;
  end;
  Result := TII;
end;

function GetActiveDiceCount : TIntegerArray;
begin
  Result := GetDiceCount(false);
end;

Function CheckForStraight(Selected : Boolean) : Boolean; //Checks for Stright
var                                                      //False Positive given....
  I : Integer;
  TI : TIntegerArray;
begin
  TI := GetDiceCount(Selected);
  Result := False;
  If not AllDiceActive then
    Exit;
  For I := 0 to 5 do
    If  TI[I] > 1 then
      Exit;
  Result := True;
end;

Function Checkfor2Trips(Selected : Boolean) : Boolean;
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive then
    exit;
  For I := 0 to 5 do
    If TI[i] = 3 then
      Inc(II);
  Result := (II = 2);
end;

Function Checkfor3Pairs(Selected : Boolean) : Boolean;
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive then
    exit;
  For I := 0 to 5 do
    If TI[i] = 2 then
      Inc(II);
  Result := (II = 3);
end;

Function CheckforPairAndSet(Selected : Boolean) : Boolean;    // Broken
var
  I, II : Integer;
  TI : TIntegerArray;

begin
  TI := GetActiveDiceCount;
  Result := False;
  if not AllDiceActive then
    exit;

  For I := 0 to 5 do
    case TI[i] of
      4 : for II := 0 to 5 do
            if TI[II] = 2 then
            begin
              Result := true;
              exit;
            end;

      2 : For II := 0 to 5 do
            if TI[II] = 4 then
            begin
              Result := true;
              exit;
            end;
    end;
end;

function CheckforSets(Out Which: Integer; Selected : Boolean) : Boolean;
var
  I : Integer;
  TI : TIntegerArray;
begin
  result := True;
  TI := GetDiceCount(Selected);
  for I := 0 to 5 do
    If InIntArray([6,5,4,3], TI[i]) then
    begin
      Which := (I + 1);
      Exit;
    end;
  Result := False;
end;

procedure MarkScorablebyNumber(Number : Integer); // Mark specific Numbered dice as scorable
var
  I : Integer;
begin
  For I := 1 to 6 do
    if Dice[i].Number = Number then
      Dice[i].Scorable := true;
end;

procedure MarkAllScorable; //Mark all scorable dice
var
  I : Integer;
begin
  for I := 1 to 6 do
    Dice[i].Scorable := true;
end;

function CheckForOnes(Selected : Boolean; Amount : Integer) : Boolean;
var
  TI : TIntegerArray;
begin
  TI := GetDiceCount(Selected);
  Result := (TI[0] > 0);
  Amount := TI[0];
end;

function CheckForFives(Selected : Boolean; Amount : Integer) : Boolean;
var
  TI : TIntegerArray;
begin
  TI := GetDiceCount(Selected);
  Result := (TI[4] > 0);
  Amount := TI[4];
end;

Function ScorableDice: Boolean; //Checks for Scorable dice
var                                      // Check for 2 triplet's  DONE!
  I, II : Integer;                           // Check for 3 Pair's     DONE!
  TI : TIntegerArray;                    // Check for 4 any number + Pair DONE!
begin                                    // Check for 6 any number DONE!
  Result := False;                       // Check for 5 any number DONE!
  For I := 0 to 6 do                     // check for 4 any number DONE!
  case I of                              // Check for 3 any number DONE!
    0 : if CheckForStraight(False) then         // Check for 1's DONE!
        begin                            // Check for 5's DONE!
          MarkAllScorable;
          Result := true;
        end;
    1 : if Checkfor2Trips(False) then
        begin
          MarkAllScorable;
          result := true;
        end;
    2 : if Checkfor3Pairs(False) then
        begin
          MarkAllScorable;
          result := true;
        end;
    3 : if CheckforPairAndSet(False) then
        begin
          MarkAllScorable;
          result := true;
        end;
    4 : If CheckforSets(II, False) then
        begin
          MarkScorablebyNumber(II);
          result := true;
        end;
    5 : If CheckForOnes(false, II) then
        begin
          MarkScorablebyNumber(1);
          result := true;
        end;
    6 : If CheckForFives(false, II) then
        begin
          MarkScorablebyNumber(5);
          result := true;
        end;
  end;
end;

procedure ClickDice(Which : Integer);
begin
  If Dice[Which].Scorable then
    If Dice[which].Selected then
      Dice[which].Selected := false
    else
      dice[which].Selected := True;
end;

procedure ResetDice;
var
  I : Integer;
begin
  for I := 1 to 6 do
    with Dice[I] do
    begin
      Selected := False;
      Scorable := False;
      Active := True;
      Number := 0;
    end;
end;

function GetSetScore(Which : Integer) : Integer;
var
  TI : TIntegerArray;
begin
  TI := GetDiceCount(true);
  case TI[Which - 1] of
  3: If Which = 1 then
       Result := 300
     else
       Result := Which * 100;

  4: result := 1000;

  5: result := 2000;

  6: result := 3000;
  end;
end;

function GetSelectedDiceScore : Integer;
var
  I, II, Skip, Score : Integer;
  TI, TII : TIntegerArray;
begin
  TI := GetSelectedDice;
  writeln('High(TI) = ' + tostr(High(TI)));
  for I := 0 to 6 do
  Case I of
   0 : if CheckForStraight(true) then         // Check for 1's DONE!
        begin                            // Check for 5's DONE!
          IncEx(Score, 1000);
          writeln('Straight');
          Break;
        end;
    1 : if Checkfor2Trips(true) then
        begin
          IncEx(Score, 1000);
          writeln('2 Trips');
          Break;
        end;
    2 : if Checkfor3Pairs(true) then
        begin
          IncEx(Score, 1000);
          writeln('3 Pairs');
          Break;
        end;
    3 : if CheckforPairAndSet(true) then
        begin
          IncEx(Score, 1000);
          writeln('Pair and set score of ' + tostr(Score));
          Break;
        end;
    4 : If CheckforSets(II, true) then
        begin
          IncEx(Score, GetSetScore(II));
          Writeln('Set of ' + tostr(II));
          If II = 1 then
            Skip := 1;
          if II = 5 then
            skip := 5;
          writeln(tostr(Skip));
        end;
    5 : If Not (Skip = 1) then
        If CheckForOnes(true, II) then
        begin
          IncEx(score, II * 100);
          writeln(tostr(Score));
        end;
    6 : If Not (Skip = 5) then
          If CheckForFives(true, II) then
        begin
          MarkScorablebyNumber(5);
          IncEx(score, II * 50);
          writeln(tostr(Score));
        end;
  end;
  Result := Score;
end;

Var
  IIIIII : Integer;
  TIII : TIntegerArray;

begin
  TIII := [2, 2, 4, 4, 4, 4];
  ActivateAllDice;
  //DiceActivation(5, False);
  Rolldice(False);
  writeln(tostr(GetDiceCount(False)));
  If ScorableDice then
  begin
    For IIIIII := 1 to 6 do
      if dice[iiiiii].Scorable then
        dice[iiiiii].Selected := true;
    writeln(tostr(GetSelectedDiceScore));
  end;
  writeln(tostr(dice) + ' (Selected, Scorable, Active, Number)');
end.
